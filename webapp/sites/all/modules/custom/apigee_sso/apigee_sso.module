<?php

/**
 * Implements hook_init().
 */
function apigee_sso_init() {
  drupal_add_css(drupal_get_path('module', 'apigee_sso') . '/apigee_sso.css',
    array('group' => CSS_THEME, 'every_page' => TRUE));
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function apigee_sso_theme() {
  return array(
    'apigee-sso-signin-block' => array(
      'template' => 'apigee_sso_signin_block',
      'path' => drupal_get_path('module', 'apigee_sso') . "/templates"
    )
  );
}

/**
 * Implements hook_menu().
 *
 * @return array
 */
function apigee_sso_menu() {
  $items = array();
  $items['apigee_sso'] = array(
    'title' => 'Authenticate with Google',
    'page callback' => 'apigee_sso_do_sso',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Page callback
 */
function apigee_sso_do_sso() {

  module_load_include('module', 'openid', 'openid');

  $scheme = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on' ? 'https' : 'http');
  $destination = (isset($_GET['destination']) ? $_GET['destination'] : 'node');
  $return_to = $scheme . '://' . $_SERVER['SERVER_NAME'] . base_path() . 'openid/authenticate?destination=' . $destination;
  $google_identifier = 'https://www.google.com/accounts/o8/id';

  $form_values = array(
    'openid_identifier' => $google_identifier,
    'openid.return_to' => $return_to,
    'op' => 'Log in',
    'form_id' => 'user_login_block'
  );

  openid_begin($google_identifier, $return_to, $form_values);
}

/**
 * Implements hook_form_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function apigee_sso_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
      $block = apigee_sso_block_view();
      $form['sign_in_with_google_apps'] = array(
        '#type' => 'markup',
        '#markup' => $block['content'],
        '#weight' => -99
      );
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param $form_state
 */
function apigee_sso_form_user_register_form_alter(&$form, &$form_state) {
  $email = $identity = NULL;
  $first_name = $last_name = NULL;
  if (isset($_SESSION['openid']['response']) && $_SESSION['openid']['response']['status'] == 'success') {
    // For the moment, we ignore the test for identity == claimed_id
    // so that when SERVER_NAME changes, openid logins don't fail.
    $response =& $_SESSION['openid']['response'];
    $identity = $response['openid.identity'];

    if (isset($response['openid.ext1.value.email'])) {
      $email = $response['openid.ext1.value.email'];
    }
    if (isset($response['openid.ext1.value.firstName'])) {
      $first_name = $response['openid.ext1.value.firstName'];
    }
    if (isset($response['openid.ext1.value.lastName'])) {
      $last_name = $response['openid.ext1.value.lastName'];
    }
    if (empty($first_name) && empty($last_name) && isset($response['openid.ext1.value.fullname']) && !empty($response['openid.ext1.value.fullname'])) {
      $name_parts = preg_split('!\s+!', $response['openid.ext1.value.fullname'], 2);
      if (count($name_parts) == 1) {
        $name_parts[] = '';
      }
      list($first_name, $last_name) = $name_parts;
    }
  }

  if (!empty($identity) && !empty($email)) {
    module_load_include('inc', 'openid');
    $u = user_load_by_mail($email);
    // On no mail match, $u will be FALSE. If mail was empty, $u->uid is 0.
    if ($u && $u->uid) {
      //user already exists but open ID is different because it's a different URL
      user_set_authmaps($u, array('authname_openid' => $identity));

      $mail = explode('@', strtolower($email));
      if ($mail[1] == 'apigee.com' && $u->status = 0) {
        $u->status = 1;
        user_save($u);
      }

      if (_apigee_sso_is_registration_complete($form)) {
        user_login_finalize($form_state);
      }
    }
    else {
      if (array_key_exists("#default_value", $form['account']['mail'])) {
        $aMail = explode("@", $form['account']['mail']['#default_value']);
        $form['account']['name']['#default_value'] = $aMail[0];
        if ($aMail[1] == 'apigee.com') {
          $rid = db_select('role', 'r')
            ->fields('r', array('rid'))
            ->condition('name', 'administrator')
            ->execute()
            ->fetchCol();
          $form['account']['roles']['#default_value'] = array($rid);
        }
      }
      // Fill in first/last name settings if we were able to read them from openid extensions
      if (isset($form['field_first_name'][LANGUAGE_NONE][0]) && !empty($first_name)) {
        $form['field_first_name'][LANGUAGE_NONE][0]['#default_value'] = $first_name;
      }
      if (isset($form['field_last_name'][LANGUAGE_NONE][0]) && !empty($last_name)) {
        $form['field_last_name'][LANGUAGE_NONE][0]['#default_value'] = $last_name;
      }
    }

  }
  else {
    $block = apigee_sso_block_view();
    $form['sign_in_with_google_apps'] = array(
      '#type' => 'markup',
      '#markup' => $block['content'],
      '#weight' => -99
    );

  }
}

/**
 * Implements hook_block_info().
 *
 * @param int $delta
 * @return array
 */
function apigee_sso_block_info($delta = 0) {
  $blocks = array();
  $blocks[0] = array(
    'info' => t('Apigee SSO'),
    'weight' => 0,
    'status' => 1,
    'region' => 'sidebar_first'
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta
 * @return array
 */
function apigee_sso_block_view($delta = '') {
  switch ($delta) {
    default:
      $block = array();
      $block['subject'] = t('Apigee SSO');
      $block['content'] = theme('apigee-sso-signin-block');
  }
  return $block;
}


function apigee_sso_user_insert(&$edit, $account, $category) {

}

function apigee_sso_openid_response($response, $account) {

}

/**
 * Recursively parses the registration $form to see if all required form fields
 * have been filled in.
 *
 * This is just a kludge to determine if a user should be finalized when they
 * see the form, as happens in apigee_sso_form_user_register_form_alter()
 * above.
 *
 * @param array $element
 * @return bool
 */
function _apigee_sso_is_registration_complete($element) {
  static $parseable_types = array(
    'textfield',
    'textarea',
    'select',
    'radios',
    'checkbox',
    'checkboxes',
    'password_confirm'
  );

  foreach ($element as $key => $val) {
    // skip non-elements and inaccessible elements
    if (substr($key, 0, 1) == '#' || !is_array($val) || (isset($val['#access']) && $val['#access'] === FALSE)) {
      continue;
    }
    // For form-field types, if required and empty, registration is NOT complete
    if (isset($val['#type']) && in_array($val['#type'], $parseable_types)) {
      if (isset($val['#required']) && $val['#required'] && empty($val['#default_value'])) {
        return FALSE;
      }
    }
    // Recursively check children. If failure occurs, bubble the fail up to the next level.
    if (!_apigee_sso_is_registration_complete($val)) {
      return FALSE;
    }
  }
  return TRUE;
}
