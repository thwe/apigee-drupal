<?xml version="1.0"?>
<project name="apigee-drupal-project" default="apigee-drupal" description="Apigee Drupal Build">
	<adhoc-task name="drush"><![CDATA[

		require_once "phing/Task.php";

		class DrushParam {

		  private $value;

		  public function addText($str) {
		    $this->value = $str;
		  }

		  public function getValue() {
		    return $this->value;
		  }

		}

		class DrushOption {

		  private $name;
		  private $value;

		  public function setName($str) {
		    $this->name = $str;
		  }

		  public function getName() {
		    return $this->name;
		  }

		  public function addText($str) {
		    $this->value = $str;
		  }

		  public function getValue() {
		    return $this->value;
		  }

		  public function toString() {
		    $name  = $this->getName();
		    $value = $this->getValue();
		    $str = '--'.$name;
		    if (!empty($value)) {
		      $str .= '='.$value;
		    }
		    return $str;
		  }

		}

		class DrushTask extends Task {

		  /**
		   * The message passed in the buildfile.
		   */
		  private $command = array();
		  private $bin = NULL;
		  private $uri = NULL;
		  private $root = NULL;
		  private $assume = NULL;
		  private $simulate = FALSE;
		  private $pipe = FALSE;
		  private $options = array();
		  private $params = array();
		  private $return_glue = "\n";
		  private $return_property = NULL;
		  private $verbose = FALSE;

		  /**
		   * The Drush command to run.
		   */
		  public function setCommand($str) {
		    $this->command = $str;
		  }

		  /**
		   * Path the Drush executable.
		   */
		  public function setBin($str) {
		    $this->bin = $str;
		  }

		  /**
		   * Drupal root directory to use.
		   */
		  public function setRoot($str) {
		    $this->root = $str;
		  }

		  /**
		   * URI of the Drupal to use.
		   */
		  public function setUri($str) {
		    $this->uri = $str;
		  }

		  /**
		   * Assume 'yes' or 'no' to all prompts.
		   */
		  public function setAssume($var) {
		    if (is_string($var)) {
		      $this->assume = ($var === 'yes');
		    } else {
		      $this->assume = !!$var;
		    }
		  }

		  /**
		   * Simulate all relevant actions.
		   */
		  public function setSimulate($var) {
		    if (is_string($var)) {
		      $var = strtolower($var);
		      $this->simulate = ($var === 'yes' || $var === 'true');
		    } else {
		      $this->simulate = !!$var;
		    }
		  }

		  /**
		   * Use the pipe option.
		   */
		  public function setPipe($var) {
		    if (is_string($var)) {
		      $var = strtolower($var);
		      $this->pipe = ($var === 'yes' || $var === 'true');
		    } else {
		      $this->pipe = !!$var;
		    }
		  }

		  /**
		   * The 'glue' characters used between each line of the returned output.
		   */
		  public function setReturnGlue($str) {
		    $this->return_glue = (string) $str;
		  }

		  /**
		   * The name of a Phing property to assign the Drush command's output to.
		   */
		  public function setReturnProperty($str) {
		    $this->return_property = $str;
		  }

		  /**
		   * Parameters for the Drush command.
		   */
		  public function createParam() {
		    $o = new DrushParam();
		    $this->params[] = $o;
		    return $o;
		  }

		  /**
		   * Options for the Drush command.
		   */
		  public function createOption() {
		    $o = new DrushOption();
		    $this->options[] = $o;
		    return $o;
		  }

		  /**
		   * Display extra information about the command.
		   */
		  public function setVerbose($var) {
		    if (is_string($var)) {
		      $this->verbose = ($var === 'yes');
		    } else {
		      $this->verbose = !!$var;
		    }
		  }

		  /**
		   * Initialize the task.
		   */
		  public function init() {
		    // Get default root, uri and binary from project.
		    $this->root = $this->getProject()->getProperty('drush.root');
		    $this->uri = $this->getProject()->getProperty('drush.uri');
		    $this->bin = $this->getProject()->getProperty('drush.bin');
		  }

		  /**
		   * The main entry point method.
		   */
		  public function main() {
		    $command = array();

		    $command[] = !empty($this->bin) ? $this->bin : 'drush';

		    $option = new DrushOption();
		    $option->setName('nocolor');
		    $this->options[] = $option;

		    if (!empty($this->root)) {
		      $option = new DrushOption();
		      $option->setName('root');
		      $option->addText($this->root);
		      $this->options[] = $option;
		    }

		    if (!empty($this->uri)) {
		      $option = new DrushOption();
		      $option->setName('uri');
		      $option->addText($this->uri);
		      $this->options[] = $option;
		    }

		    if (is_bool($this->assume)) {
		      $option = new DrushOption();
		      $option->setName(($this->assume ? 'yes' : 'no'));
		      $this->options[] = $option;
		    }

		    if ($this->simulate) {
		      $option = new DrushOption();
		      $option->setName('simulate');
		      $this->options[] = $option;
		    }

		    if ($this->pipe) {
		      $option = new DrushOption();
		      $option->setName('pipe');
		      $this->options[] = $option;
		    }

		    if ($this->verbose) {
		      $option = new DrushOption();
		      $option->setName('verbose');
		      $this->options[] = $option;
		    }

		    foreach ($this->options as $option) {
		      $command[] = $option->toString();
		    }

		    $command[] = $this->command;

		    foreach ($this->params as $param) {
		      $command[] = $param->getValue();
		    }

		    $command = implode(' ', $command);

		    // Execute Drush.
		    $this->log("Executing '$command'...");
		    $output = array();
		    exec($command, $output, $return);
		    // Collect Drush output for display through Phing's log.
		    foreach ($output as $line) {
		      $this->log($line);
		    }
		    // Set value of the 'pipe' property.
		    if (!empty($this->return_property)) {
		      $this->getProject()->setProperty($this->return_property, implode($this->return_glue, $output));
		    }
		    // Build fail.
		    if ($return != 0) {
		      throw new BuildException("Drush exited with code $return");
		    }
		    return $return != 0;
		  }

		}
		
		
		
		
		
		]]></adhoc-task>
	<target name="invalid">
	        <fail>This build has failed. Please reconsider your life choices.</fail>
	</target>
	
	<target name="apigee-drupal">
		<drush command="cc">
			<param>drush</param>
		</drush>
		<echo>-------------------------------------------------</echo>
		<echo> +++++ Running Phing/Drush build </echo>
		<echo>-------------------------------------------------</echo>
	    <drush command="make" assume="yes">
			<option name="prepare-install" />
			<option name="working-copy" />
			<option name="no-gitinfofile" />
			<option name="no-cache" />
			<option name="force-complete" />
			<param>apigee.make</param>
		</drush>
		<delete dir="../drupal-settings" quiet="true" />
		<exec command="git clone git@github.com:apigee/drupal-settings.git ../drupal-settings"  />
		<copy todir="sites" >
		  <fileset dir="../drupal-settings/sites">
		    <include name="**/**" />
		  </fileset>
		</copy>
		<if>
			<equals arg1="${sites_default_files}" arg2="Yes" />
			<then>
				<copy todir="sites/default/files">
					<fileset dir="../tmp/files">
					    <include name="**/**" />
					</fileset>
				</copy>
			</then>
		</if>
		<copy todir="${user.home}/.drush" overwrite="true" >
			<fileset dir="../drupal-settings/drush">
				<include name="*.aliases.drushrc.php" />
			</fileset>
		</copy>
	</target>
	<target name="dc-local-build">
		<drush command="cc">
			<param>drush</param>
		</drush>
		<exec command="drush @dc-local updatedb -y" />
		<exec command="drush @dc-local cc all -y" />
	</target>
	<target name="dc-dev-build">
		<drush command="cc">
			<param>drush</param>
		</drush>
		<copy todir="/disk2/www/devconnect-dev.apigee.com/webapp">
			<fileset dir="../webapp">
			    <include name="**/**" />
			</fileset>
		</copy>
		<exec command="drush @dc-dev updatedb -y" />
		<exec command="drush @dc-dev cc all -y" />
	</target>
	<target name="dc-dit-build">
		<drush command="cc">
			<param>drush</param>
		</drush>
		<exec command="drush @dc-dit updatedb -y" />
		<exec command="drush @dc-dit cc all -y" />
	</target>
	<target name="dc-stage-build">
		<drush command="cc">
			<param>drush</param>
		</drush>
		<exec command="drush @dc-stage updatedb -y" />
		<exec command="drush @dc-stage cc all -y" />
	</target>
	<target name="dc-prod-build">
		<drush command="cc">
			<param>drush</param>
		</drush>
		<exec command="drush @dc-stage updatedb -y" />
		<exec command="drush @dc-stage cc all -y" />
	</target>
	<target name="docs-dev-build">
		<drush command="cc">
			<param>drush</param>
		</drush>
		<copy todir="/disk2/www/v4docs-dev.apigee.com/docs">
			<fileset dir="../webapp">
			    <include name="**/**" />
			</fileset>
		</copy>
		<exec command="drush @docs-dev updatedb -y" />
		<exec command="drush @docs-dev cc all -y" />
	</target>
	<target name='copy-drush'>
		<copy todir="${user.home}/.drush" overwrite="true" >
			<fileset dir="../drupal-settings/drush">
				<include name="*.aliases.drushrc.php" />
			</fileset>
		</copy>
	</target>
	<target name="mktg-dev-build">
		<drush command="cc">
			<param>drush</param>
		</drush>
		<copy todir="/disk2/www/mktg-dev.apigee.com/about">
			<fileset dir="../webapp">
			    <include name="**/**" />
			</fileset>
		</copy>
		<exec command="drush @mktg-dev updatedb -y" />
		<exec command="drush @mktg-dev cc all -y" />
	</target>
	<target name="blog-dev-build">
		<drush command="cc">
			<param>drush</param>
		</drush>
		<copy todir="/disk2/www/blog-dev.apigee.com">
			<fileset dir="../webapp">
			    <include name="**/**" />
			</fileset>
		</copy>
		<exec command="drush @mktg-dev updatedb -y" />
		<exec command="drush @mktg-dev cc all -y" />
	</target>
</project>
